{"ast":null,"code":"var _jsxFileName = \"/Users/sara/Documents/personal-projects/metaschool/frontend/src/pages/Assessments/components/AddAssesment/AssessmentForm.js\";\nimport { DeleteTwoTone, PlusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Button, Checkbox, Col, Collapse, Divider, Form, Input, Row, Select, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\"; // import {\n\nconst {\n  Panel\n} = Collapse;\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 4\n    }\n  },\n  wrapperCol: {\n    xs: {\n      span: 24\n    },\n    sm: {\n      span: 20\n    }\n  }\n};\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0\n    },\n    sm: {\n      span: 20,\n      offset: 4\n    }\n  }\n};\nconst {\n  Text\n} = Typography;\n\nconst AssessmentForm = (_ref) => {\n  let {\n    initialValues,\n    onSubmit,\n    status,\n    type,\n    setStatus,\n    feedbackTemplates,\n    currentUnits\n  } = _ref;\n  const [fetching, setFetching] = useState(false);\n  const [form] = Form.useForm();\n  useEffect(() => {//\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"assessment-add-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    labelCol: {\n      span: 7\n    },\n    onFinish: onSubmit,\n    initialValues: initialValues,\n    form: form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Title\",\n    name: \"title\",\n    rules: [{\n      required: true,\n      message: \"Please input title!\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Description\",\n    name: \"description\",\n    rules: [{\n      required: true,\n      message: \"Please input description!\"\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Is Active?\",\n    name: \"isActive\",\n    rules: [{\n      required: true\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Select.Option, {\n    value: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, \"True\"), /*#__PURE__*/React.createElement(Select.Option, {\n    value: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, \"False\"))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.List, {\n    name: \"sections\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, (fields, _ref2) => {\n    let {\n      add,\n      remove\n    } = _ref2;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 23\n      }\n    }), fields.map((field, index) => {\n      return /*#__PURE__*/React.createElement(\"section\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 27\n        }\n      }, /*#__PURE__*/React.createElement(Divider, {\n        orientation: \"center\",\n        orientationMargin: 50,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }\n      }, \"SECTION - \", index + 1, /*#__PURE__*/React.createElement(DeleteTwoTone, {\n        onClick: () => remove(field.name),\n        twoToneColor: \"#FE4255\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 31\n        }\n      })), /*#__PURE__*/React.createElement(Form.List, {\n        name: [field.name, \"questions\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 29\n        }\n      }, (fields, _ref3) => {\n        let {\n          add,\n          remove\n        } = _ref3;\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"section\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 37\n          }\n        }, fields.map((questionField, index) => {\n          return /*#__PURE__*/React.createElement(\"section\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 43\n            }\n          }, /*#__PURE__*/React.createElement(Divider, {\n            orientation: \"left\",\n            orientationMargin: 50,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 45\n            }\n          }, \"Question - \", index + 1, /*#__PURE__*/React.createElement(DeleteTwoTone, {\n            onClick: () => remove(questionField.name),\n            twoToneColor: \"#FE4255\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 47\n            }\n          })), /*#__PURE__*/React.createElement(Form.Item, {\n            name: [questionField.name, \"description\"],\n            style: {\n              width: \"400px\"\n            },\n            rules: [{\n              required: true,\n              message: \"please enter a question statement\"\n            }, {\n              whitespace: true\n            }],\n            hasFeedback: true,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 45\n            }\n          }, /*#__PURE__*/React.createElement(Input.TextArea, {\n            placeholder: \"Question Statement\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 47\n            }\n          })), /*#__PURE__*/React.createElement(Form.List, {\n            name: [questionField.name, \"answers\"],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 45\n            }\n          }, (fields, _ref4) => {\n            let {\n              add,\n              remove\n            } = _ref4;\n            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"section\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 53\n              }\n            }, fields.map((optionsField, index) => {\n              return /*#__PURE__*/React.createElement(\"section\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 61\n                }\n              }, /*#__PURE__*/React.createElement(Row, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 63\n                }\n              }, /*#__PURE__*/React.createElement(Col, {\n                span: 1,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 65\n                }\n              }, /*#__PURE__*/React.createElement(DeleteTwoTone, {\n                onClick: () => remove(optionsField.name),\n                twoToneColor: \"#FE4255\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 67\n                }\n              })), /*#__PURE__*/React.createElement(Col, {\n                span: 12,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 65\n                }\n              }, /*#__PURE__*/React.createElement(Form.Item, {\n                style: {\n                  width: \"200px\"\n                },\n                rules: [{\n                  required: true,\n                  message: \"please enter an answer option\"\n                }, {\n                  whitespace: true\n                }],\n                name: [optionsField.name, \"description\"],\n                hasFeedback: true,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 67\n                }\n              }, /*#__PURE__*/React.createElement(Input.TextArea, {\n                placeholder: \"Option Statement\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 69\n                }\n              }))), /*#__PURE__*/React.createElement(Col, {\n                span: 11,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 65\n                }\n              }, /*#__PURE__*/React.createElement(Form.Item, {\n                initialValue: false,\n                name: [optionsField.name, \"isCorrect\"],\n                valuePropName: \"checked\",\n                label: \"Is Correct? \",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 67\n                }\n              }, /*#__PURE__*/React.createElement(Checkbox, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 69\n                }\n              })))));\n            })), /*#__PURE__*/React.createElement(Form.Item, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 53\n              }\n            }, /*#__PURE__*/React.createElement(PlusCircleOutlined, {\n              onClick: () => add(),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 55\n              }\n            }), \"New Option\"));\n          }));\n        })), /*#__PURE__*/React.createElement(Form.Item, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          type: \"dashed\",\n          onClick: () => {\n            add();\n          },\n          icon: /*#__PURE__*/React.createElement(PlusOutlined, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 47\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 39\n          }\n        }, \"New Question\")));\n      }), /*#__PURE__*/React.createElement(Divider, {\n        orientation: \"center\",\n        orientationMargin: 50,\n        dashed: true,\n        plain: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 29\n        }\n      }, \"END OF SECTION - \", index + 1));\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"dashed\",\n      onClick: () => {\n        add();\n      },\n      block: true,\n      icon: /*#__PURE__*/React.createElement(PlusOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 23\n      }\n    }, \"New Section\")));\n  }))), status.type === \"ERROR\" ? /*#__PURE__*/React.createElement(Text, {\n    type: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 11\n    }\n  }, status.message) : null, status.type === \"SUCCESS\" ? /*#__PURE__*/React.createElement(Text, {\n    type: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 11\n    }\n  }, \"Successful!\") : null, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    justify: \"end\",\n    gutter: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }\n  }, type)))));\n};\n\nexport default AssessmentForm;","map":{"version":3,"sources":["/Users/sara/Documents/personal-projects/metaschool/frontend/src/pages/Assessments/components/AddAssesment/AssessmentForm.js"],"names":["DeleteTwoTone","PlusCircleOutlined","PlusOutlined","Button","Checkbox","Col","Collapse","Divider","Form","Input","Row","Select","Typography","React","useEffect","useState","Panel","formItemLayout","labelCol","xs","span","sm","wrapperCol","formItemLayoutWithOutLabel","offset","Text","AssessmentForm","initialValues","onSubmit","status","type","setStatus","feedbackTemplates","currentUnits","fetching","setFetching","form","useForm","required","message","fields","add","remove","map","field","index","name","questionField","width","whitespace","optionsField"],"mappings":"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","sourcesContent":["import {\n  DeleteTwoTone,\n  PlusCircleOutlined,\n  PlusOutlined,\n} from \"@ant-design/icons\";\nimport {\n  Button,\n  Checkbox,\n  Col,\n  Collapse,\n  Divider,\n  Form,\n  Input,\n  Row,\n  Select,\n  Typography,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// import {\nconst { Panel } = Collapse;\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 4 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 20 },\n  },\n};\nconst formItemLayoutWithOutLabel = {\n  wrapperCol: {\n    xs: { span: 24, offset: 0 },\n    sm: { span: 20, offset: 4 },\n  },\n};\n\nconst { Text } = Typography;\n\nconst AssessmentForm = ({\n  initialValues,\n  onSubmit,\n  status,\n  type,\n  setStatus,\n  feedbackTemplates,\n  currentUnits,\n}) => {\n  const [fetching, setFetching] = useState(false);\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    //\n  }, []);\n\n  return (\n    <div className=\"assessment-add-form\">\n      <Form\n        labelCol={{ span: 7 }}\n        onFinish={onSubmit}\n        initialValues={initialValues}\n        form={form}\n      >\n        <section>\n          <Form.Item\n            label=\"Title\"\n            name=\"title\"\n            rules={[{ required: true, message: \"Please input title!\" }]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label=\"Description\"\n            name=\"description\"\n            rules={[{ required: true, message: \"Please input description!\" }]}\n          >\n            <Input />\n          </Form.Item>\n\n          {/* add a mode dropdown for live/ondemand */}\n\n          <Form.Item\n            label=\"Is Active?\"\n            name=\"isActive\"\n            rules={[{ required: true }]}\n          >\n            <Select>\n              <Select.Option value={true}>True</Select.Option>\n              <Select.Option value={false}>False</Select.Option>\n            </Select>\n          </Form.Item>\n\n          <section>\n            <Form.List name={\"sections\"}>\n              {(fields, { add, remove }) => {\n                return (\n                  <>\n                    <section>\n                      <Divider />\n                      {fields.map((field, index) => {\n                        return (\n                          <section>\n                            <Divider\n                              orientation=\"center\"\n                              orientationMargin={50}\n                            >\n                              SECTION - {index + 1}\n                              <DeleteTwoTone\n                                onClick={() => remove(field.name)}\n                                twoToneColor=\"#FE4255\"\n                              />\n                            </Divider>\n                            <Form.List name={[field.name, \"questions\"]}>\n                              {(fields, { add, remove }) => {\n                                return (\n                                  <>\n                                    <section>\n                                      {fields.map((questionField, index) => {\n                                        return (\n                                          <section>\n                                            <Divider\n                                              orientation=\"left\"\n                                              orientationMargin={50}\n                                            >\n                                              Question - {index + 1}\n                                              <DeleteTwoTone\n                                                onClick={() =>\n                                                  remove(questionField.name)\n                                                }\n                                                twoToneColor=\"#FE4255\"\n                                              />\n                                            </Divider>\n                                            <Form.Item\n                                              name={[\n                                                questionField.name,\n                                                \"description\",\n                                              ]}\n                                              style={{ width: \"400px\" }}\n                                              rules={[\n                                                {\n                                                  required: true,\n                                                  message:\n                                                    \"please enter a question statement\",\n                                                },\n                                                {\n                                                  whitespace: true,\n                                                },\n                                              ]}\n                                              hasFeedback\n                                            >\n                                              <Input.TextArea placeholder=\"Question Statement\" />\n                                            </Form.Item>\n                                            <Form.List\n                                              name={[\n                                                questionField.name,\n                                                \"answers\",\n                                              ]}\n                                            >\n                                              {(fields, { add, remove }) => {\n                                                return (\n                                                  <>\n                                                    <section>\n                                                      {fields.map(\n                                                        (\n                                                          optionsField,\n                                                          index\n                                                        ) => {\n                                                          return (\n                                                            <section>\n                                                              {/* <Divider\n                                                                orientation=\"left\"\n                                                                orientationMargin={\n                                                                  50\n                                                                }\n                                                              >\n                                                                Option -{\" \"}\n                                                                {index + 1}\n                                                                <DeleteTwoTone\n                                                                  onClick={() =>\n                                                                    remove(\n                                                                      optionsField.name\n                                                                    )\n                                                                  }\n                                                                  twoToneColor=\"#FE4255\"\n                                                                />\n                                                              </Divider> */}\n                                                              <Row>\n                                                                <Col span={1}>\n                                                                  <DeleteTwoTone\n                                                                    onClick={() =>\n                                                                      remove(\n                                                                        optionsField.name\n                                                                      )\n                                                                    }\n                                                                    twoToneColor=\"#FE4255\"\n                                                                  />\n                                                                </Col>\n                                                                <Col span={12}>\n                                                                  <Form.Item\n                                                                    style={{\n                                                                      width:\n                                                                        \"200px\",\n                                                                    }}\n                                                                    rules={[\n                                                                      {\n                                                                        required: true,\n                                                                        message:\n                                                                          \"please enter an answer option\",\n                                                                      },\n                                                                      {\n                                                                        whitespace: true,\n                                                                      },\n                                                                    ]}\n                                                                    name={[\n                                                                      optionsField.name,\n                                                                      \"description\",\n                                                                    ]}\n                                                                    hasFeedback\n                                                                  >\n                                                                    <Input.TextArea placeholder=\"Option Statement\" />\n                                                                  </Form.Item>\n                                                                </Col>\n                                                                <Col span={11}>\n                                                                  <Form.Item\n                                                                    initialValue={\n                                                                      false\n                                                                    }\n                                                                    name={[\n                                                                      optionsField.name,\n                                                                      \"isCorrect\",\n                                                                    ]}\n                                                                    valuePropName=\"checked\"\n                                                                    label=\"Is Correct? \"\n                                                                  >\n                                                                    <Checkbox />\n                                                                  </Form.Item>\n                                                                </Col>\n                                                              </Row>\n                                                            </section>\n                                                          );\n                                                        }\n                                                      )}\n                                                    </section>\n                                                    <Form.Item>\n                                                      <PlusCircleOutlined\n                                                        onClick={() => add()}\n                                                      />\n                                                      New Option\n                                                    </Form.Item>\n                                                  </>\n                                                );\n                                              }}\n                                            </Form.List>\n                                          </section>\n                                        );\n                                      })}\n                                    </section>\n                                    <Form.Item>\n                                      <Button\n                                        type=\"dashed\"\n                                        onClick={() => {\n                                          add();\n                                        }}\n                                        icon={<PlusOutlined />}\n                                      >\n                                        New Question\n                                      </Button>\n                                    </Form.Item>\n                                  </>\n                                );\n                              }}\n                            </Form.List>\n\n                            <Divider\n                              orientation=\"center\"\n                              orientationMargin={50}\n                              dashed={true}\n                              plain={true}\n                            >\n                              END OF SECTION - {index + 1}\n                            </Divider>\n                          </section>\n                        );\n                      })}\n                    </section>\n                    <Form.Item>\n                      <Button\n                        type=\"dashed\"\n                        onClick={() => {\n                          add();\n                        }}\n                        block\n                        icon={<PlusOutlined />}\n                      >\n                        New Section\n                      </Button>\n                    </Form.Item>\n                  </>\n                );\n              }}\n            </Form.List>\n          </section>\n        </section>\n\n        {status.type === \"ERROR\" ? (\n          <Text type=\"danger\">{status.message}</Text>\n        ) : null}\n        {status.type === \"SUCCESS\" ? (\n          <Text type=\"success\">Successful!</Text>\n        ) : null}\n        <br />\n        <Row justify=\"end\" gutter={12}>\n          <Col>\n            <Button type=\"primary\" htmlType=\"submit\">\n              {type}\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    </div>\n  );\n};\n\nexport default AssessmentForm;\n"]},"metadata":{},"sourceType":"module"}