{"ast":null,"code":"var _jsxFileName = \"/Users/sara/Documents/personal-projects/metaschool/frontend/src/pages/Assessments/AssessmentsPage.jsx\";\nimport { Button, Col, Form, notification, Row, Space, Typography } from 'antd';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport TableWithSorter from '../../components/Common/TableWithSorter';\nimport { getAssessments } from '../../services/assessmentService';\nimport AssessmentAdd from './components/AddAssesment/AssessmentAdd';\nimport CommunitiesSearchForm from './components/CommunitiesSearchForm.jsx';\nimport { defaultPageSize, sortOrderList } from './constant';\nconst {\n  Title\n} = Typography;\n\nconst AssessmentPage = () => {\n  const [form] = Form.useForm();\n  const [pageNo, setPageNo] = useState(1);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n  const [totalCount, setTotalCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [assessmentList, setAssessmentList] = useState([]);\n  const [visibleAddModal, setVisibleAddModel] = useState(false);\n\n  const onClickModal = () => {\n    setVisibleAddModel(true);\n  };\n\n  const [filters, setFilters] = useState({\n    sortOrder: sortOrderList[0].value,\n    startDate: null,\n    endDate: null,\n    sortBy: 'createdAt',\n    status: null\n  });\n  const columns = [{\n    title: 'No',\n    dataIndex: 'index',\n    key: 'index',\n    render: (value, item, index) => /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 39\n      }\n    }, index + 1)\n  }, {\n    title: \"Title\",\n    dataIndex: \"title\",\n    key: \"title\",\n    render: (text, record) => /*#__PURE__*/React.createElement(Space, {\n      size: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: '/assessments/' + record.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }, text))\n  }, {\n    title: 'Description',\n    dataIndex: 'description',\n    key: 'description',\n    render: (text, record) => /*#__PURE__*/React.createElement(Space, {\n      size: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: '/assessments/' + record.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, text))\n  }, {\n    title: 'Created At',\n    dataIndex: 'createdAt',\n    key: 'createdAt',\n    render: value => /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 26\n      }\n    }, new Date(value).toLocaleString()),\n    sorter: (a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(),\n    sortDirections: ['descend', 'ascend']\n  }];\n\n  const onPaginationChange = data => {\n    setPageNo(data.current);\n    setPageSize(data.pageSize);\n  };\n\n  const onFinish = values => {\n    var _values$sortOrder, _values$assessmentSea, _values$isActive;\n\n    setPageNo(1);\n\n    if (new Date(values === null || values === void 0 ? void 0 : values.startDate).getTime() > new Date(values === null || values === void 0 ? void 0 : values.endDate).getTime()) {\n      notification['error']({\n        message: 'Error',\n        description: 'End Date cannot be before Start Date'\n      });\n      return;\n    }\n\n    const filterData = {\n      sortOrder: (_values$sortOrder = values.sortOrder) !== null && _values$sortOrder !== void 0 ? _values$sortOrder : sortOrderList[0].value,\n      sortBy: 'createdAt',\n      assessmentSearch: (_values$assessmentSea = values.assessmentSearch) !== null && _values$assessmentSea !== void 0 ? _values$assessmentSea : null,\n      isActive: (_values$isActive = values.isActive) !== null && _values$isActive !== void 0 ? _values$isActive : null\n    };\n    setFilters(filterData);\n  };\n\n  const resetForm = () => {\n    form.resetFields();\n    form.submit();\n  };\n\n  const getAssessmentList = useCallback(async () => {\n    try {\n      var _values$data, _values$data2;\n\n      setIsLoading(true);\n      const values = await getAssessments({\n        pageNo,\n        pageSize,\n        ...filters\n      });\n      const assessments = values === null || values === void 0 ? void 0 : (_values$data = values.data) === null || _values$data === void 0 ? void 0 : _values$data.sort((assessmentA, assessmentB) => assessmentA.createdAt > assessmentB.createdAt);\n      setTotalCount(values === null || values === void 0 ? void 0 : (_values$data2 = values.data) === null || _values$data2 === void 0 ? void 0 : _values$data2.totalCount);\n      setAssessmentList(assessments);\n    } catch (error) {\n      notification['error']({\n        message: 'Error',\n        description: `Error: ${error.message}`\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [form, pageNo, pageSize, filters]);\n  useEffect(() => {\n    getAssessmentList();\n  }, [getAssessmentList]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    justify: \"space-between\",\n    align: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, \"Assessments!\"))), /*#__PURE__*/React.createElement(Button, {\n    type: \"ghost\",\n    onClick: onClickModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, \"Add\"), /*#__PURE__*/React.createElement(AssessmentAdd, {\n    isOpen: visibleAddModal,\n    toggle: () => setVisibleAddModel(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CommunitiesSearchForm, {\n    onFinish: onFinish,\n    resetForm: resetForm,\n    form: form,\n    totalCount: totalCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TableWithSorter, {\n    tableLayout: \"auto\",\n    scroll: {\n      x: 1000\n    },\n    expandable: {\n      defaultExpandAllRows: true\n    },\n    loading: isLoading,\n    dataSource: assessmentList,\n    columns: columns,\n    pagination: {\n      total: totalCount,\n      defaultPageSize: defaultPageSize,\n      showSizeChanger: true,\n      pageSizeOptions: ['10', '20', '30', '50']\n    },\n    onChange: onPaginationChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default AssessmentPage;","map":{"version":3,"sources":["/Users/sara/Documents/personal-projects/metaschool/frontend/src/pages/Assessments/AssessmentsPage.jsx"],"names":["Button","Col","Form","notification","Row","Space","Typography","React","useCallback","useEffect","useState","Link","TableWithSorter","getAssessments","AssessmentAdd","CommunitiesSearchForm","defaultPageSize","sortOrderList","Title","AssessmentPage","form","useForm","pageNo","setPageNo","pageSize","setPageSize","totalCount","setTotalCount","isLoading","setIsLoading","assessmentList","setAssessmentList","visibleAddModal","setVisibleAddModel","onClickModal","filters","setFilters","sortOrder","value","startDate","endDate","sortBy","status","columns","title","dataIndex","key","render","item","index","text","record","id","Date","toLocaleString","sorter","a","b","createdAt","getTime","sortDirections","onPaginationChange","data","current","onFinish","values","message","description","filterData","assessmentSearch","isActive","resetForm","resetFields","submit","getAssessmentList","assessments","sort","assessmentA","assessmentB","error","x","defaultExpandAllRows","total","showSizeChanger","pageSizeOptions"],"mappings":"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","sourcesContent":["import { Button, Col, Form, notification, Row, Space, Typography } from 'antd';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport TableWithSorter from '../../components/Common/TableWithSorter';\nimport { getAssessments } from '../../services/assessmentService';\nimport AssessmentAdd from './components/AddAssesment/AssessmentAdd';\nimport CommunitiesSearchForm from './components/CommunitiesSearchForm.jsx';\nimport {\n  defaultPageSize,\n  sortOrderList\n} from './constant';\n\n\nconst { Title } = Typography;\n\nconst AssessmentPage = () => {\n  const [form] = Form.useForm();\n\n  const [pageNo, setPageNo] = useState(1);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n  const [totalCount, setTotalCount] = useState(0);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [assessmentList, setAssessmentList] = useState([]);\n  const [visibleAddModal, setVisibleAddModel] = useState(false);\n  const onClickModal = () => {\n    setVisibleAddModel(true);\n  };\n\n  const [filters, setFilters] = useState({\n    sortOrder: sortOrderList[0].value,\n    startDate: null,\n    endDate: null,\n    sortBy: 'createdAt',\n    status: null\n  });\n\n  const columns = [\n    {\n      title: 'No',\n      dataIndex: 'index',\n      key: 'index',\n      render: (value, item, index) => <span>{index + 1}</span>\n    },\n    {\n\n      title: \"Title\",\n      dataIndex: \"title\",\n      key: \"title\",\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Link to={'/assessments/' + record.id}>{text}</Link>\n        </Space>\n      )\n    },\n    {\n      title: 'Description',\n      dataIndex: 'description',\n      key: 'description',\n      render: (text, record) => (\n        <Space size=\"middle\">\n          <Link to={'/assessments/' + record.id}>{text}</Link>\n        </Space>\n      )\n    },\n    {\n      title: 'Created At',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      render: (value) => <span>{new Date(value).toLocaleString()}</span>,\n      sorter: (a, b) =>\n        new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime(),\n      sortDirections: ['descend', 'ascend']\n    }\n  ];\n\n\n  const onPaginationChange = (data) => {\n    setPageNo(data.current);\n    setPageSize(data.pageSize);\n  };\n\n  const onFinish = (values) => {\n    setPageNo(1);\n    if (\n      new Date(values?.startDate).getTime() >\n      new Date(values?.endDate).getTime()\n    ) {\n      notification['error']({\n        message: 'Error',\n        description: 'End Date cannot be before Start Date'\n      });\n      return;\n    }\n\n    const filterData = {\n      sortOrder: values.sortOrder ?? sortOrderList[0].value,\n      sortBy: 'createdAt',\n      assessmentSearch: values.assessmentSearch ?? null,\n      isActive: values.isActive ?? null\n    };\n\n    setFilters(filterData);\n  };\n\n  const resetForm = () => {\n    form.resetFields();\n    form.submit();\n  };\n\n  const getAssessmentList = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      const values = await getAssessments({\n        pageNo,\n        pageSize,\n        ...filters\n      });\n      const assessments = values?.data?.sort(\n        (assessmentA, assessmentB) =>\n        assessmentA.createdAt > assessmentB.createdAt\n      );\n      setTotalCount(values?.data?.totalCount);\n      setAssessmentList(assessments);\n    } catch (error) {\n      notification['error']({\n        message: 'Error',\n        description: `Error: ${error.message}`\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [form, pageNo, pageSize, filters]);\n\n  useEffect(() => {\n    getAssessmentList();\n  }, [getAssessmentList]);\n\n  return (\n    <div>\n      <div>\n        <Row justify=\"space-between\" align=\"middle\">\n          <Col>\n            <Title>Assessments!</Title>\n          </Col>\n        </Row>\n        <Button type=\"ghost\" onClick={onClickModal}>\n            Add\n          </Button>\n        <AssessmentAdd\n            isOpen={visibleAddModal}\n            toggle={() => setVisibleAddModel(false)}\n          />\n        <CommunitiesSearchForm\n          onFinish={onFinish}\n          resetForm={resetForm}\n          form={form}\n          totalCount={totalCount}\n        />\n        <TableWithSorter\n          tableLayout=\"auto\"\n          scroll={{ x: 1000 }}\n          expandable={{ defaultExpandAllRows: true }}\n          loading={isLoading}\n          dataSource={assessmentList}\n          columns={columns}\n          pagination={{\n            total: totalCount,\n            defaultPageSize: defaultPageSize,\n            showSizeChanger: true,\n            pageSizeOptions: ['10', '20', '30', '50']\n          }}\n          onChange={onPaginationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default AssessmentPage;\n"]},"metadata":{},"sourceType":"module"}