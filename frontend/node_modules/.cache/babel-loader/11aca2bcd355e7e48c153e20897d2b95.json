{"ast":null,"code":"import axios from \"axios\";\nimport AuthStore, { getRefreshToken } from \"../../stores/authStore\"; // TODO to set timeout on particular req except email template service\n\nconst privateAxiosInstance = axios.create({});\nprivateAxiosInstance.interceptors.request.use(config => {\n  try {\n    let accessToken = AuthStore.getState().accessToken;\n    config.headers.Authorization = accessToken;\n    return config;\n  } catch (error) {\n    console.log(\"Error attaching token to axios instance\");\n    return config;\n  }\n});\nprivateAxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async function (error) {\n  var _error$response;\n\n  const originalRequest = error.config;\n\n  if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n\n    try {\n      let response = await refreshAccessToken();\n      return privateAxiosInstance(originalRequest);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  }\n\n  return Promise.reject(error);\n});\n\nconst refreshAccessToken = async () => {\n  try {\n    let refreshToken = getRefreshToken(AuthStore.getState());\n    let response = await axios.post(`${process.env.REACT_APP_BACKEND_URL}/auth/refreshToken`, {\n      refreshToken\n    });\n    AuthStore.dispatch({\n      type: \"AUTH/LOG_IN\",\n      payload: response.data\n    });\n    return response.data.refreshToken;\n  } catch (error) {\n    AuthStore.dispatch({\n      type: \"AUTH/LOG_OUT\"\n    });\n    throw new Error(\"Error refreshing token!\");\n  }\n};\n\nexport default privateAxiosInstance;","map":{"version":3,"sources":["/Users/sara/Documents/personal-projects/metaschool/frontend/src/components/shared/axios.js"],"names":["axios","AuthStore","getRefreshToken","privateAxiosInstance","create","interceptors","request","use","config","accessToken","getState","headers","Authorization","error","console","log","response","originalRequest","status","_retry","refreshAccessToken","err","Promise","reject","refreshToken","post","process","env","REACT_APP_BACKEND_URL","dispatch","type","payload","data","Error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,IAAoBC,eAApB,QAA2C,wBAA3C,C,CAEA;;AACA,MAAMC,oBAAoB,GAAGH,KAAK,CAACI,MAAN,CAAa,EAAb,CAA7B;AAEAD,oBAAoB,CAACE,YAArB,CAAkCC,OAAlC,CAA0CC,GAA1C,CAA+CC,MAAD,IAAY;AACxD,MAAI;AACF,QAAIC,WAAW,GAAGR,SAAS,CAACS,QAAV,GAAqBD,WAAvC;AACAD,IAAAA,MAAM,CAACG,OAAP,CAAeC,aAAf,GAA+BH,WAA/B;AACA,WAAOD,MAAP;AACD,GAJD,CAIE,OAAOK,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACA,WAAOP,MAAP;AACD;AACF,CATD;AAWAL,oBAAoB,CAACE,YAArB,CAAkCW,QAAlC,CAA2CT,GAA3C,CACGS,QAAD,IAAc;AACZ,SAAOA,QAAP;AACD,CAHH,EAIE,gBAAgBH,KAAhB,EAAuB;AAAA;;AACrB,QAAMI,eAAe,GAAGJ,KAAK,CAACL,MAA9B;;AACA,MAAI,CAAAK,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEG,QAAP,oEAAiBE,MAAjB,MAA4B,GAA5B,IAAmC,CAACD,eAAe,CAACE,MAAxD,EAAgE;AAC9DF,IAAAA,eAAe,CAACE,MAAhB,GAAyB,IAAzB;;AACA,QAAI;AACF,UAAIH,QAAQ,GAAG,MAAMI,kBAAkB,EAAvC;AACA,aAAOjB,oBAAoB,CAACc,eAAD,CAA3B;AACD,KAHD,CAGE,OAAOI,GAAP,EAAY;AACZ,aAAOC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;AACD;AACF;;AACD,SAAOC,OAAO,CAACC,MAAR,CAAeV,KAAf,CAAP;AACD,CAhBH;;AAmBA,MAAMO,kBAAkB,GAAG,YAAY;AACrC,MAAI;AACF,QAAII,YAAY,GAAGtB,eAAe,CAACD,SAAS,CAACS,QAAV,EAAD,CAAlC;AACA,QAAIM,QAAQ,GAAG,MAAMhB,KAAK,CAACyB,IAAN,CAClB,GAAEC,OAAO,CAACC,GAAR,CAAYC,qBAAsB,oBADlB,EAEnB;AACEJ,MAAAA;AADF,KAFmB,CAArB;AAMAvB,IAAAA,SAAS,CAAC4B,QAAV,CAAmB;AAAEC,MAAAA,IAAI,EAAE,aAAR;AAAuBC,MAAAA,OAAO,EAAEf,QAAQ,CAACgB;AAAzC,KAAnB;AACA,WAAOhB,QAAQ,CAACgB,IAAT,CAAcR,YAArB;AACD,GAVD,CAUE,OAAOX,KAAP,EAAc;AACdZ,IAAAA,SAAS,CAAC4B,QAAV,CAAmB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAnB;AACA,UAAM,IAAIG,KAAJ,CAAU,yBAAV,CAAN;AACD;AACF,CAfD;;AAiBA,eAAe9B,oBAAf","sourcesContent":["import axios from \"axios\";\nimport AuthStore, { getRefreshToken } from \"../../stores/authStore\";\n\n// TODO to set timeout on particular req except email template service\nconst privateAxiosInstance = axios.create({});\n\nprivateAxiosInstance.interceptors.request.use((config) => {\n  try {\n    let accessToken = AuthStore.getState().accessToken;\n    config.headers.Authorization = accessToken;\n    return config;\n  } catch (error) {\n    console.log(\"Error attaching token to axios instance\");\n    return config;\n  }\n});\n\nprivateAxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async function (error) {\n    const originalRequest = error.config;\n    if (error?.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        let response = await refreshAccessToken();\n        return privateAxiosInstance(originalRequest);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst refreshAccessToken = async () => {\n  try {\n    let refreshToken = getRefreshToken(AuthStore.getState());\n    let response = await axios.post(\n      `${process.env.REACT_APP_BACKEND_URL}/auth/refreshToken`,\n      {\n        refreshToken,\n      }\n    );\n    AuthStore.dispatch({ type: \"AUTH/LOG_IN\", payload: response.data });\n    return response.data.refreshToken;\n  } catch (error) {\n    AuthStore.dispatch({ type: \"AUTH/LOG_OUT\" });\n    throw new Error(\"Error refreshing token!\");\n  }\n};\n\nexport default privateAxiosInstance;\n"]},"metadata":{},"sourceType":"module"}