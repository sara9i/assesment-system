{"ast":null,"code":"import compute from 'compute-scroll-into-view';\n\nfunction isOptionsObject(options) {\n  return options === Object(options) && Object.keys(options).length !== 0;\n}\n\nfunction defaultBehavior(actions, behavior) {\n  if (behavior === void 0) {\n    behavior = 'auto';\n  }\n\n  var canSmoothScroll = ('scrollBehavior' in document.body.style);\n  actions.forEach(function (_ref) {\n    var el = _ref.el,\n        top = _ref.top,\n        left = _ref.left;\n\n    if (el.scroll && canSmoothScroll) {\n      el.scroll({\n        top: top,\n        left: left,\n        behavior: behavior\n      });\n    } else {\n      el.scrollTop = top;\n      el.scrollLeft = left;\n    }\n  });\n}\n\nfunction getOptions(options) {\n  if (options === false) {\n    return {\n      block: 'end',\n      inline: 'nearest'\n    };\n  }\n\n  if (isOptionsObject(options)) {\n    return options;\n  }\n\n  return {\n    block: 'start',\n    inline: 'nearest'\n  };\n}\n\nfunction scrollIntoView(target, options) {\n  var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);\n\n  if (isOptionsObject(options) && typeof options.behavior === 'function') {\n    return options.behavior(isTargetAttached ? compute(target, options) : []);\n  }\n\n  if (!isTargetAttached) {\n    return;\n  }\n\n  var computeOptions = getOptions(options);\n  return defaultBehavior(compute(target, computeOptions), computeOptions.behavior);\n}\n\nexport default scrollIntoView;","map":{"version":3,"sources":["/Users/sara/Documents/personal-projects/metaschool/frontend/node_modules/scroll-into-view-if-needed/es/index.js"],"names":["compute","isOptionsObject","options","Object","keys","length","defaultBehavior","actions","behavior","canSmoothScroll","document","body","style","forEach","_ref","el","top","left","scroll","scrollTop","scrollLeft","getOptions","block","inline","scrollIntoView","target","isTargetAttached","isConnected","ownerDocument","documentElement","contains","computeOptions"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,0BAApB;;AACA,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAChC,SAAOA,OAAO,KAAKC,MAAM,CAACD,OAAD,CAAlB,IAA+BC,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBG,MAArB,KAAgC,CAAtE;AACD;;AACD,SAASC,eAAT,CAAyBC,OAAzB,EAAkCC,QAAlC,EAA4C;AAC1C,MAAIA,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AACvBA,IAAAA,QAAQ,GAAG,MAAX;AACD;;AACD,MAAIC,eAAe,IAAI,oBAAoBC,QAAQ,CAACC,IAAT,CAAcC,KAAtC,CAAnB;AACAL,EAAAA,OAAO,CAACM,OAAR,CAAgB,UAAUC,IAAV,EAAgB;AAC9B,QAAIC,EAAE,GAAGD,IAAI,CAACC,EAAd;AAAA,QACEC,GAAG,GAAGF,IAAI,CAACE,GADb;AAAA,QAEEC,IAAI,GAAGH,IAAI,CAACG,IAFd;;AAGA,QAAIF,EAAE,CAACG,MAAH,IAAaT,eAAjB,EAAkC;AAChCM,MAAAA,EAAE,CAACG,MAAH,CAAU;AACRF,QAAAA,GAAG,EAAEA,GADG;AAERC,QAAAA,IAAI,EAAEA,IAFE;AAGRT,QAAAA,QAAQ,EAAEA;AAHF,OAAV;AAKD,KAND,MAMO;AACLO,MAAAA,EAAE,CAACI,SAAH,GAAeH,GAAf;AACAD,MAAAA,EAAE,CAACK,UAAH,GAAgBH,IAAhB;AACD;AACF,GAdD;AAeD;;AACD,SAASI,UAAT,CAAoBnB,OAApB,EAA6B;AAC3B,MAAIA,OAAO,KAAK,KAAhB,EAAuB;AACrB,WAAO;AACLoB,MAAAA,KAAK,EAAE,KADF;AAELC,MAAAA,MAAM,EAAE;AAFH,KAAP;AAID;;AACD,MAAItB,eAAe,CAACC,OAAD,CAAnB,EAA8B;AAC5B,WAAOA,OAAP;AACD;;AACD,SAAO;AACLoB,IAAAA,KAAK,EAAE,OADF;AAELC,IAAAA,MAAM,EAAE;AAFH,GAAP;AAID;;AACD,SAASC,cAAT,CAAwBC,MAAxB,EAAgCvB,OAAhC,EAAyC;AACvC,MAAIwB,gBAAgB,GAAGD,MAAM,CAACE,WAAP,IAAsBF,MAAM,CAACG,aAAP,CAAqBC,eAArB,CAAqCC,QAArC,CAA8CL,MAA9C,CAA7C;;AACA,MAAIxB,eAAe,CAACC,OAAD,CAAf,IAA4B,OAAOA,OAAO,CAACM,QAAf,KAA4B,UAA5D,EAAwE;AACtE,WAAON,OAAO,CAACM,QAAR,CAAiBkB,gBAAgB,GAAG1B,OAAO,CAACyB,MAAD,EAASvB,OAAT,CAAV,GAA8B,EAA/D,CAAP;AACD;;AACD,MAAI,CAACwB,gBAAL,EAAuB;AACrB;AACD;;AACD,MAAIK,cAAc,GAAGV,UAAU,CAACnB,OAAD,CAA/B;AACA,SAAOI,eAAe,CAACN,OAAO,CAACyB,MAAD,EAASM,cAAT,CAAR,EAAkCA,cAAc,CAACvB,QAAjD,CAAtB;AACD;;AACD,eAAegB,cAAf","sourcesContent":["import compute from 'compute-scroll-into-view';\nfunction isOptionsObject(options) {\n  return options === Object(options) && Object.keys(options).length !== 0;\n}\nfunction defaultBehavior(actions, behavior) {\n  if (behavior === void 0) {\n    behavior = 'auto';\n  }\n  var canSmoothScroll = ('scrollBehavior' in document.body.style);\n  actions.forEach(function (_ref) {\n    var el = _ref.el,\n      top = _ref.top,\n      left = _ref.left;\n    if (el.scroll && canSmoothScroll) {\n      el.scroll({\n        top: top,\n        left: left,\n        behavior: behavior\n      });\n    } else {\n      el.scrollTop = top;\n      el.scrollLeft = left;\n    }\n  });\n}\nfunction getOptions(options) {\n  if (options === false) {\n    return {\n      block: 'end',\n      inline: 'nearest'\n    };\n  }\n  if (isOptionsObject(options)) {\n    return options;\n  }\n  return {\n    block: 'start',\n    inline: 'nearest'\n  };\n}\nfunction scrollIntoView(target, options) {\n  var isTargetAttached = target.isConnected || target.ownerDocument.documentElement.contains(target);\n  if (isOptionsObject(options) && typeof options.behavior === 'function') {\n    return options.behavior(isTargetAttached ? compute(target, options) : []);\n  }\n  if (!isTargetAttached) {\n    return;\n  }\n  var computeOptions = getOptions(options);\n  return defaultBehavior(compute(target, computeOptions), computeOptions.behavior);\n}\nexport default scrollIntoView;"]},"metadata":{},"sourceType":"module"}