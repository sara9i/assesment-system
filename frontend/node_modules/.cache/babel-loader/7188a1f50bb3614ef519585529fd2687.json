{"ast":null,"code":"var _jsxFileName = \"/Users/sara/Documents/personal-projects/metaschool/frontend/src/pages/Assessments/AssessmentPage/AssessmentPage.js\";\nimport { Col, Divider, notification, Row, Tag, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { getAssessment } from \"../../../services/assessmentService\";\nconst {\n  Text,\n  Title\n} = Typography;\n\nconst renderBoolean = bool => {\n  const rendered = bool === true ? {\n    text: \"Yes\",\n    color: \"green\"\n  } : {\n    text: \"No\",\n    color: \"volcano\"\n  };\n  return /*#__PURE__*/React.createElement(Tag, {\n    color: rendered.color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 10\n    }\n  }, rendered.text);\n}; // const renderSections = ({ fieldName, fieldValue }) => {\n//   if (typeof fieldValue === \"boolean\")\n//     return (\n//       <Row gutter={[16, 16]}>\n//         <Col span={6}>\n//           <Text strong>{fieldName}</Text>\n//         </Col>\n//         <Col span={18}>{renderBoolean(fieldValue)}</Col>\n//       </Row>\n//     );\n//   if (typeof fieldValue === \"string\" || typeof fieldValue === \"number\")\n//     return (\n//       <Row gutter={[16, 16]}>\n//         <Col span={6}>\n//           <Text strong>\n//             {fieldName.replace(/(\\w)(\\w*)/g, function (g0, g1, g2) {\n//               return g1.toUpperCase() + g2.toLowerCase();\n//             })}\n//           </Text>\n//         </Col>\n//         <Col span={18}>{fieldValue}</Col>\n//       </Row>\n//     );\n//   if (typeof fieldValue === \"object\" && Array.isArray(fieldValue)) {\n//     if (fieldName == \"questions\") {\n//       assessmentKeys &&\n//         assessmentKeys?.map((fieldName) =>\n//           renderQuestions({\n//             fieldName,\n//             fieldValue: assessment?.[fieldName],\n//           })\n//         );\n//     }\n//     // return (\n//     //   <Row gutter={[16, 16]}>\n//     //     <Col span={6}>\n//     //       <Text strong>\n//     //         {fieldName.replace(/(\\w)(\\w*)/g, function (g0, g1, g2) {\n//     //           return g1.toUpperCase() + g2.toLowerCase();\n//     //         })}\n//     //       </Text>\n//     //     </Col>\n//     //     <List\n//     //       size=\"small\"\n//     //       bordered\n//     //       dataSource={fieldValue}\n//     //       renderItem={(item) => <List.Item>{JSON.stringify(item)}</List.Item>}\n//     //     />\n//     //   </Row>\n//     // );\n//   }\n// };\n\n\nconst renderFields = (_ref) => {\n  let {\n    fieldName,\n    fieldValue\n  } = _ref;\n  if (typeof fieldValue === \"boolean\") return /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 16],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    strong: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, fieldName)), /*#__PURE__*/React.createElement(Col, {\n    span: 18,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, renderBoolean(fieldValue)));\n  if (typeof fieldValue === \"string\" || typeof fieldValue === \"number\") return /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 16],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    strong: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, fieldName.replace(/(\\w)(\\w*)/g, function (g0, g1, g2) {\n    return g1.toUpperCase() + g2.toLowerCase();\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: 18,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, fieldValue));\n\n  if (typeof fieldValue === \"object\" && Array.isArray(fieldValue)) {\n    if (fieldName == \"sections\") {\n      fieldValue && (fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.map(sectionName => renderFields({\n        sectionName,\n        fieldValue: fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue[sectionName]\n      })));\n    } // return (\n    //   <Row gutter={[16, 16]}>\n    //     <Col span={6}>\n    //       <Text strong>\n    //         {fieldName.replace(/(\\w)(\\w*)/g, function (g0, g1, g2) {\n    //           return g1.toUpperCase() + g2.toLowerCase();\n    //         })}\n    //       </Text>\n    //     </Col>\n    //     <List\n    //       size=\"small\"\n    //       bordered\n    //       dataSource={fieldValue}\n    //       renderItem={(item) => <List.Item>{JSON.stringify(item)}</List.Item>}\n    //     />\n    //   </Row>\n    // );\n\n  }\n};\n\nconst AssessmentPage = props => {\n  const [assessment, setAssessmentId] = useState(null);\n  const [assessmentKeys, setAssessmentKeys] = useState(null);\n  const assessmentId = props.match.params.id;\n\n  const getAssessmentData = async () => {\n    try {\n      const result = await getAssessment({\n        id: assessmentId\n      });\n      setAssessmentId(result.data);\n      const keys = Object.keys(result.data);\n      setAssessmentKeys(keys);\n    } catch (error) {\n      notification[\"error\"]({\n        message: \"Error\",\n        description: `Error: ${error.message}`\n      });\n    }\n  };\n\n  useEffect(() => {\n    getAssessmentData();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Title, {\n    level: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, \"Heres the assessment details.\"), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }), assessmentKeys && (assessmentKeys === null || assessmentKeys === void 0 ? void 0 : assessmentKeys.map(fieldName => renderFields({\n    fieldName,\n    fieldValue: assessment === null || assessment === void 0 ? void 0 : assessment[fieldName]\n  }))));\n};\n\nexport default withRouter(AssessmentPage);","map":{"version":3,"sources":["/Users/sara/Documents/personal-projects/metaschool/frontend/src/pages/Assessments/AssessmentPage/AssessmentPage.js"],"names":["Col","Divider","notification","Row","Tag","Typography","React","useEffect","useState","withRouter","getAssessment","Text","Title","renderBoolean","bool","rendered","text","color","renderFields","fieldName","fieldValue","replace","g0","g1","g2","toUpperCase","toLowerCase","Array","isArray","map","sectionName","AssessmentPage","props","assessment","setAssessmentId","assessmentKeys","setAssessmentKeys","assessmentId","match","params","id","getAssessmentData","result","data","keys","Object","error","message","description"],"mappings":";AAAA,SAASA,GAAT,EAAcC,OAAd,EAAuBC,YAAvB,EAAqCC,GAArC,EAA0CC,GAA1C,EAA+CC,UAA/C,QAAiE,MAAjE;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,aAAT,QAA8B,qCAA9B;AAEA,MAAM;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,IAAkBP,UAAxB;;AAEA,MAAMQ,aAAa,GAAIC,IAAD,IAAU;AAC9B,QAAMC,QAAQ,GACZD,IAAI,KAAK,IAAT,GACI;AAAEE,IAAAA,IAAI,EAAE,KAAR;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GADJ,GAEI;AAAED,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAHN;AAKA,sBAAO,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAEF,QAAQ,CAACE,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BF,QAAQ,CAACC,IAAtC,CAAP;AACD,CAPD,C,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAME,YAAY,GAAG,UAA+B;AAAA,MAA9B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA8B;AAClD,MAAI,OAAOA,UAAP,KAAsB,SAA1B,EACE,oBACE,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,MAAM,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcD,SAAd,CADF,CADF,eAIE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBN,aAAa,CAACO,UAAD,CAA7B,CAJF,CADF;AAQF,MAAI,OAAOA,UAAP,KAAsB,QAAtB,IAAkC,OAAOA,UAAP,KAAsB,QAA5D,EACE,oBACE,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,MAAM,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,SAAS,CAACE,OAAV,CAAkB,YAAlB,EAAgC,UAAUC,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsB;AACrD,WAAOD,EAAE,CAACE,WAAH,KAAmBD,EAAE,CAACE,WAAH,EAA1B;AACD,GAFA,CADH,CADF,CADF,eAQE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBN,UAAhB,CARF,CADF;;AAaF,MAAI,OAAOA,UAAP,KAAsB,QAAtB,IAAkCO,KAAK,CAACC,OAAN,CAAcR,UAAd,CAAtC,EAAiE;AAC/D,QAAID,SAAS,IAAI,UAAjB,EAA6B;AAC3BC,MAAAA,UAAU,KACRA,UADQ,aACRA,UADQ,uBACRA,UAAU,CAAES,GAAZ,CAAiBC,WAAD,IACdZ,YAAY,CAAC;AACXY,QAAAA,WADW;AAEXV,QAAAA,UAAU,EAAEA,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAGU,WAAH;AAFX,OAAD,CADd,CADQ,CAAV;AAOD,KAT8D,CAU/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;AACF,CApDD;;AAsDA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAChC,QAAM,CAACC,UAAD,EAAaC,eAAb,IAAgC1B,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAAC2B,cAAD,EAAiBC,iBAAjB,IAAsC5B,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM6B,YAAY,GAAGL,KAAK,CAACM,KAAN,CAAYC,MAAZ,CAAmBC,EAAxC;;AAEA,QAAMC,iBAAiB,GAAG,YAAY;AACpC,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMhC,aAAa,CAAC;AAAE8B,QAAAA,EAAE,EAAEH;AAAN,OAAD,CAAlC;AACAH,MAAAA,eAAe,CAACQ,MAAM,CAACC,IAAR,CAAf;AACA,YAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,MAAM,CAACC,IAAnB,CAAb;AACAP,MAAAA,iBAAiB,CAACQ,IAAD,CAAjB;AACD,KALD,CAKE,OAAOE,KAAP,EAAc;AACd5C,MAAAA,YAAY,CAAC,OAAD,CAAZ,CAAsB;AACpB6C,QAAAA,OAAO,EAAE,OADW;AAEpBC,QAAAA,WAAW,EAAG,UAASF,KAAK,CAACC,OAAQ;AAFjB,OAAtB;AAID;AACF,GAZD;;AAcAxC,EAAAA,SAAS,CAAC,MAAM;AACdkC,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAGA,sBACE,uDACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADF,eAGE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAKGN,cAAc,KACbA,cADa,aACbA,cADa,uBACbA,cAAc,CAAEN,GAAhB,CAAqBV,SAAD,IAClBD,YAAY,CAAC;AACXC,IAAAA,SADW;AAEXC,IAAAA,UAAU,EAAEa,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAGd,SAAH;AAFX,GAAD,CADd,CADa,CALjB,CADF;AAeD,CArCD;;AAuCA,eAAeV,UAAU,CAACsB,cAAD,CAAzB","sourcesContent":["import { Col, Divider, notification, Row, Tag, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { getAssessment } from \"../../../services/assessmentService\";\n\nconst { Text, Title } = Typography;\n\nconst renderBoolean = (bool) => {\n  const rendered =\n    bool === true\n      ? { text: \"Yes\", color: \"green\" }\n      : { text: \"No\", color: \"volcano\" };\n\n  return <Tag color={rendered.color}>{rendered.text}</Tag>;\n};\n// const renderSections = ({ fieldName, fieldValue }) => {\n//   if (typeof fieldValue === \"boolean\")\n//     return (\n//       <Row gutter={[16, 16]}>\n//         <Col span={6}>\n//           <Text strong>{fieldName}</Text>\n//         </Col>\n//         <Col span={18}>{renderBoolean(fieldValue)}</Col>\n//       </Row>\n//     );\n//   if (typeof fieldValue === \"string\" || typeof fieldValue === \"number\")\n//     return (\n//       <Row gutter={[16, 16]}>\n//         <Col span={6}>\n//           <Text strong>\n//             {fieldName.replace(/(\\w)(\\w*)/g, function (g0, g1, g2) {\n//               return g1.toUpperCase() + g2.toLowerCase();\n//             })}\n//           </Text>\n//         </Col>\n//         <Col span={18}>{fieldValue}</Col>\n//       </Row>\n//     );\n\n//   if (typeof fieldValue === \"object\" && Array.isArray(fieldValue)) {\n//     if (fieldName == \"questions\") {\n//       assessmentKeys &&\n//         assessmentKeys?.map((fieldName) =>\n//           renderQuestions({\n//             fieldName,\n//             fieldValue: assessment?.[fieldName],\n//           })\n//         );\n//     }\n//     // return (\n//     //   <Row gutter={[16, 16]}>\n//     //     <Col span={6}>\n//     //       <Text strong>\n//     //         {fieldName.replace(/(\\w)(\\w*)/g, function (g0, g1, g2) {\n//     //           return g1.toUpperCase() + g2.toLowerCase();\n//     //         })}\n//     //       </Text>\n//     //     </Col>\n//     //     <List\n//     //       size=\"small\"\n//     //       bordered\n//     //       dataSource={fieldValue}\n//     //       renderItem={(item) => <List.Item>{JSON.stringify(item)}</List.Item>}\n//     //     />\n//     //   </Row>\n//     // );\n//   }\n// };\n\nconst renderFields = ({ fieldName, fieldValue }) => {\n  if (typeof fieldValue === \"boolean\")\n    return (\n      <Row gutter={[16, 16]}>\n        <Col span={6}>\n          <Text strong>{fieldName}</Text>\n        </Col>\n        <Col span={18}>{renderBoolean(fieldValue)}</Col>\n      </Row>\n    );\n  if (typeof fieldValue === \"string\" || typeof fieldValue === \"number\")\n    return (\n      <Row gutter={[16, 16]}>\n        <Col span={6}>\n          <Text strong>\n            {fieldName.replace(/(\\w)(\\w*)/g, function (g0, g1, g2) {\n              return g1.toUpperCase() + g2.toLowerCase();\n            })}\n          </Text>\n        </Col>\n        <Col span={18}>{fieldValue}</Col>\n      </Row>\n    );\n\n  if (typeof fieldValue === \"object\" && Array.isArray(fieldValue)) {\n    if (fieldName == \"sections\") {\n      fieldValue &&\n        fieldValue?.map((sectionName) =>\n          renderFields({\n            sectionName,\n            fieldValue: fieldValue?.[sectionName],\n          })\n        );\n    }\n    // return (\n    //   <Row gutter={[16, 16]}>\n    //     <Col span={6}>\n    //       <Text strong>\n    //         {fieldName.replace(/(\\w)(\\w*)/g, function (g0, g1, g2) {\n    //           return g1.toUpperCase() + g2.toLowerCase();\n    //         })}\n    //       </Text>\n    //     </Col>\n    //     <List\n    //       size=\"small\"\n    //       bordered\n    //       dataSource={fieldValue}\n    //       renderItem={(item) => <List.Item>{JSON.stringify(item)}</List.Item>}\n    //     />\n    //   </Row>\n    // );\n  }\n};\n\nconst AssessmentPage = (props) => {\n  const [assessment, setAssessmentId] = useState(null);\n  const [assessmentKeys, setAssessmentKeys] = useState(null);\n  const assessmentId = props.match.params.id;\n\n  const getAssessmentData = async () => {\n    try {\n      const result = await getAssessment({ id: assessmentId });\n      setAssessmentId(result.data);\n      const keys = Object.keys(result.data);\n      setAssessmentKeys(keys);\n    } catch (error) {\n      notification[\"error\"]({\n        message: \"Error\",\n        description: `Error: ${error.message}`,\n      });\n    }\n  };\n\n  useEffect(() => {\n    getAssessmentData();\n  }, []);\n  return (\n    <>\n      <Title level={2}>Heres the assessment details.</Title>\n\n      <Divider />\n\n      {assessmentKeys &&\n        assessmentKeys?.map((fieldName) =>\n          renderFields({\n            fieldName,\n            fieldValue: assessment?.[fieldName],\n          })\n        )}\n    </>\n  );\n};\n\nexport default withRouter(AssessmentPage);\n"]},"metadata":{},"sourceType":"module"}