{"ast":null,"code":"var _jsxFileName = \"/Users/sara/Documents/personal-projects/metaschool/frontend/src/pages/Assessments/AssessmentPage/AssessmentPage.js\";\nimport { Col, Divider, notification, Row, Tag, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { getAssessment } from \"../../../services/assessmentService\";\nconst {\n  Text,\n  Title\n} = Typography;\n\nconst renderBoolean = bool => {\n  const rendered = bool === true ? {\n    text: \"Yes\",\n    color: \"green\"\n  } : {\n    text: \"No\",\n    color: \"volcano\"\n  };\n  return /*#__PURE__*/React.createElement(Tag, {\n    color: rendered.color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 10\n    }\n  }, rendered.text);\n};\n\nconst renderSections = (_ref) => {\n  let {\n    fieldName,\n    fieldValue\n  } = _ref;\n  if (typeof fieldValue === \"boolean\") return /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 16],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    strong: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }, fieldName)), /*#__PURE__*/React.createElement(Col, {\n    span: 18,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, renderBoolean(fieldValue)));\n  if (typeof fieldValue === \"string\" || typeof fieldValue === \"number\") return /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 16],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    strong: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, fieldName.replace(/(\\w)(\\w*)/g, function (g0, g1, g2) {\n    return g1.toUpperCase() + g2.toLowerCase();\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: 18,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, fieldValue));\n\n  if (typeof fieldValue === \"object\" && Array.isArray(fieldValue)) {\n    if (fieldName == \"questions\") {\n      var _assessmentKeys;\n\n      assessmentKeys && ((_assessmentKeys = assessmentKeys) === null || _assessmentKeys === void 0 ? void 0 : _assessmentKeys.map(fieldName => {\n        var _assessment;\n\n        return renderQuestions({\n          fieldName,\n          fieldValue: (_assessment = assessment) === null || _assessment === void 0 ? void 0 : _assessment[fieldName]\n        });\n      }));\n    }\n  }\n};\n\nconst renderFields = (_ref2) => {\n  let {\n    fieldName,\n    fieldValue\n  } = _ref2;\n\n  if (fieldName == \"title\") {\n    return /*#__PURE__*/React.createElement(Row, {\n      gutter: [16, 16],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      strong: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }\n    }, \"Title\")), /*#__PURE__*/React.createElement(Col, {\n      span: 18,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, fieldValue));\n  } else if (fieldName == \"description\") {\n    return /*#__PURE__*/React.createElement(Row, {\n      gutter: [16, 16],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      strong: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, \"Description\")), /*#__PURE__*/React.createElement(Col, {\n      span: 18,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, fieldValue));\n  }\n\n  if (typeof fieldValue === \"boolean\") return /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 16],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    strong: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, fieldName)), /*#__PURE__*/React.createElement(Col, {\n    span: 18,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, renderBoolean(fieldValue)));\n  if (typeof fieldValue === \"string\" || typeof fieldValue === \"number\") return /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 16],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    strong: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, fieldName)), /*#__PURE__*/React.createElement(Col, {\n    span: 18,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, fieldValue));\n\n  if (typeof fieldValue === \"object\" && Array.isArray(fieldValue)) {\n    if (fieldName == \"sections\" && fieldValue) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {\n        strong: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }, \"Sections\"), /*#__PURE__*/React.createElement(Divider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }), fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.map(section => Object.keys(section).map(sectionFieldName => renderSections({\n        fieldName: sectionFieldName,\n        fieldValue: section === null || section === void 0 ? void 0 : section[fieldName]\n      })))); // return {\n      //     fieldValue.map((sectionName) =>\n      //       renderSections({\n      //         sectionName,\n      //         fieldValue: fieldValue?.[sectionName],\n      //       })\n      //     )\n      // }\n    }\n  }\n};\n\nconst AssessmentPage = props => {\n  const [assessment, setAssessmentId] = useState(null);\n  const [assessmentKeys, setAssessmentKeys] = useState(null);\n  const assessmentId = props.match.params.id;\n\n  const getAssessmentData = async () => {\n    try {\n      const result = await getAssessment({\n        id: assessmentId\n      });\n      setAssessmentId(result.data);\n      const keys = Object.keys(result.data);\n      setAssessmentKeys(keys);\n    } catch (error) {\n      notification[\"error\"]({\n        message: \"Error\",\n        description: `Error: ${error.message}`\n      });\n    }\n  };\n\n  useEffect(() => {\n    getAssessmentData();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Title, {\n    level: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, \"Assessment details.\"), /*#__PURE__*/React.createElement(Text, {\n    strong: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default withRouter(AssessmentPage);","map":{"version":3,"sources":["/Users/sara/Documents/personal-projects/metaschool/frontend/src/pages/Assessments/AssessmentPage/AssessmentPage.js"],"names":["Col","Divider","notification","Row","Tag","Typography","React","useEffect","useState","withRouter","getAssessment","Text","Title","renderBoolean","bool","rendered","text","color","renderSections","fieldName","fieldValue","replace","g0","g1","g2","toUpperCase","toLowerCase","Array","isArray","assessmentKeys","map","renderQuestions","assessment","renderFields","section","Object","keys","sectionFieldName","AssessmentPage","props","setAssessmentId","setAssessmentKeys","assessmentId","match","params","id","getAssessmentData","result","data","error","message","description"],"mappings":"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","sourcesContent":["import { Col, Divider, notification, Row, Tag, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { getAssessment } from \"../../../services/assessmentService\";\n\nconst { Text, Title } = Typography;\n\nconst renderBoolean = (bool) => {\n  const rendered =\n    bool === true\n      ? { text: \"Yes\", color: \"green\" }\n      : { text: \"No\", color: \"volcano\" };\n\n  return <Tag color={rendered.color}>{rendered.text}</Tag>;\n};\nconst renderSections = ({ fieldName, fieldValue }) => {\n  if (typeof fieldValue === \"boolean\")\n    return (\n      <Row gutter={[16, 16]}>\n        <Col span={6}>\n          <Text strong>{fieldName}</Text>\n        </Col>\n        <Col span={18}>{renderBoolean(fieldValue)}</Col>\n      </Row>\n    );\n  if (typeof fieldValue === \"string\" || typeof fieldValue === \"number\")\n    return (\n      <Row gutter={[16, 16]}>\n        <Col span={6}>\n          <Text strong>\n            {fieldName.replace(/(\\w)(\\w*)/g, function (g0, g1, g2) {\n              return g1.toUpperCase() + g2.toLowerCase();\n            })}\n          </Text>\n        </Col>\n        <Col span={18}>{fieldValue}</Col>\n      </Row>\n    );\n\n  if (typeof fieldValue === \"object\" && Array.isArray(fieldValue)) {\n    if (fieldName == \"questions\") {\n      assessmentKeys &&\n        assessmentKeys?.map((fieldName) =>\n          renderQuestions({\n            fieldName,\n            fieldValue: assessment?.[fieldName],\n          })\n        );\n    }\n  }\n};\n\nconst renderFields = ({ fieldName, fieldValue }) => {\n  if (fieldName == \"title\") {\n    return (\n      <Row gutter={[16, 16]}>\n        <Col span={6}>\n          <Text strong>{\"Title\"}</Text>\n        </Col>\n        <Col span={18}>{fieldValue}</Col>\n      </Row>\n    );\n  } else if (fieldName == \"description\") {\n    return (\n      <Row gutter={[16, 16]}>\n        <Col span={6}>\n          <Text strong>{\"Description\"}</Text>\n        </Col>\n        <Col span={18}>{fieldValue}</Col>\n      </Row>\n    );\n  }\n  if (typeof fieldValue === \"boolean\")\n    return (\n      <Row gutter={[16, 16]}>\n        <Col span={6}>\n          <Text strong>{fieldName}</Text>\n        </Col>\n        <Col span={18}>{renderBoolean(fieldValue)}</Col>\n      </Row>\n    );\n  if (typeof fieldValue === \"string\" || typeof fieldValue === \"number\")\n    return (\n      <Row gutter={[16, 16]}>\n        <Col span={6}>\n          <Text strong>{fieldName}</Text>\n        </Col>\n        <Col span={18}>{fieldValue}</Col>\n      </Row>\n    );\n\n  if (typeof fieldValue === \"object\" && Array.isArray(fieldValue)) {\n    if (fieldName == \"sections\" && fieldValue) {\n      return (\n        <>\n          <Text strong>{\"Sections\"}</Text>\n          <Divider />\n\n          {fieldValue?.map((section) =>\n            Object.keys(section).map((sectionFieldName) =>\n              renderSections({\n                fieldName: sectionFieldName,\n                fieldValue: section?.[fieldName],\n              })\n            )\n          )}\n        </>\n      );\n      // return {\n      //     fieldValue.map((sectionName) =>\n      //       renderSections({\n      //         sectionName,\n      //         fieldValue: fieldValue?.[sectionName],\n      //       })\n      //     )\n      // }\n    }\n  }\n};\n\nconst AssessmentPage = (props) => {\n  const [assessment, setAssessmentId] = useState(null);\n  const [assessmentKeys, setAssessmentKeys] = useState(null);\n  const assessmentId = props.match.params.id;\n\n  const getAssessmentData = async () => {\n    try {\n      const result = await getAssessment({ id: assessmentId });\n      setAssessmentId(result.data);\n      const keys = Object.keys(result.data);\n      setAssessmentKeys(keys);\n    } catch (error) {\n      notification[\"error\"]({\n        message: \"Error\",\n        description: `Error: ${error.message}`,\n      });\n    }\n  };\n\n  useEffect(() => {\n    getAssessmentData();\n  }, []);\n  return (\n    <>\n      <Title level={2}>Assessment details.</Title>\n      <Text strong>{\"Title\"}</Text>\n\n      <Divider />\n\n      {/* {assessmentKeys &&\n        assessmentKeys?.map((fieldName) =>\n          renderFields({\n            fieldName,\n            fieldValue: assessment?.[fieldName],\n          })\n        )} */}\n    </>\n  );\n};\n\nexport default withRouter(AssessmentPage);\n"]},"metadata":{},"sourceType":"module"}